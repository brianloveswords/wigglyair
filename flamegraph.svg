<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="166"><g><title>testrig`DYLD-STUB$$fcntl (1 samples, 0.60%)</title><rect x="0.0000%" y="517" width="0.6024%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>testrig`std::path::Path::extension (1 samples, 0.60%)</title><rect x="0.6024%" y="421" width="0.6024%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.8524%" y="431.50"></text></g><g><title>libsystem_c.dylib`readdir_r (1 samples, 0.60%)</title><rect x="1.2048%" y="373" width="0.6024%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="1.4548%" y="383.50"></text></g><g><title>testrig`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 3.61%)</title><rect x="1.2048%" y="389" width="3.6145%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="6"/><text x="1.4548%" y="399.50">test..</text></g><g><title>testrig`&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 3.01%)</title><rect x="1.8072%" y="373" width="3.0120%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="5"/><text x="2.0572%" y="383.50">tes..</text></g><g><title>libsystem_c.dylib`readdir_r (5 samples, 3.01%)</title><rect x="1.8072%" y="357" width="3.0120%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="5"/><text x="2.0572%" y="367.50">lib..</text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (5 samples, 3.01%)</title><rect x="1.8072%" y="341" width="3.0120%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="5"/><text x="2.0572%" y="351.50">lib..</text></g><g><title>testrig`walkdir::IntoIter::handle_entry (12 samples, 7.23%)</title><rect x="4.8193%" y="389" width="7.2289%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="12"/><text x="5.0693%" y="399.50">testrig`wa..</text></g><g><title>testrig`walkdir::IntoIter::push (12 samples, 7.23%)</title><rect x="4.8193%" y="373" width="7.2289%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="12"/><text x="5.0693%" y="383.50">testrig`wa..</text></g><g><title>testrig`std::sys::unix::fs::readdir (12 samples, 7.23%)</title><rect x="4.8193%" y="357" width="7.2289%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="12"/><text x="5.0693%" y="367.50">testrig`st..</text></g><g><title>libsystem_c.dylib`__opendir2 (12 samples, 7.23%)</title><rect x="4.8193%" y="341" width="7.2289%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="12"/><text x="5.0693%" y="351.50">libsystem_..</text></g><g><title>libsystem_kernel.dylib`__open_nocancel (12 samples, 7.23%)</title><rect x="4.8193%" y="325" width="7.2289%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="12"/><text x="5.0693%" y="335.50">libsystem_..</text></g><g><title>testrig`&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 11.45%)</title><rect x="1.2048%" y="405" width="11.4458%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="19"/><text x="1.4548%" y="415.50">testrig`&lt;walkdir:..</text></g><g><title>testrig`walkdir::IntoIter::pop (1 samples, 0.60%)</title><rect x="12.0482%" y="389" width="0.6024%" height="15" fill="rgb(206,188,39)" fg:x="20" fg:w="1"/><text x="12.2982%" y="399.50"></text></g><g><title>testrig`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.60%)</title><rect x="12.0482%" y="373" width="0.6024%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="1"/><text x="12.2982%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (1 samples, 0.60%)</title><rect x="12.0482%" y="357" width="0.6024%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="1"/><text x="12.2982%" y="367.50"></text></g><g><title>testrig`tokio::task::spawn::spawn (1 samples, 0.60%)</title><rect x="12.6506%" y="405" width="0.6024%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="1"/><text x="12.9006%" y="415.50"></text></g><g><title>testrig`tokio::runtime::context::current::with_current (1 samples, 0.60%)</title><rect x="12.6506%" y="389" width="0.6024%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="1"/><text x="12.9006%" y="399.50"></text></g><g><title>testrig`tokio::runtime::scheduler::Handle::spawn (1 samples, 0.60%)</title><rect x="12.6506%" y="373" width="0.6024%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="1"/><text x="12.9006%" y="383.50"></text></g><g><title>testrig`tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (1 samples, 0.60%)</title><rect x="12.6506%" y="357" width="0.6024%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="1"/><text x="12.9006%" y="367.50"></text></g><g><title>testrig`tokio::runtime::task::raw::RawTask::new (1 samples, 0.60%)</title><rect x="12.6506%" y="341" width="0.6024%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="1"/><text x="12.9006%" y="351.50"></text></g><g><title>testrig`__rdl_alloc (1 samples, 0.60%)</title><rect x="12.6506%" y="325" width="0.6024%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="1"/><text x="12.9006%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (1 samples, 0.60%)</title><rect x="12.6506%" y="309" width="0.6024%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="12.9006%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.60%)</title><rect x="12.6506%" y="293" width="0.6024%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="12.9006%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (1 samples, 0.60%)</title><rect x="12.6506%" y="277" width="0.6024%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="12.9006%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.60%)</title><rect x="12.6506%" y="261" width="0.6024%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="1"/><text x="12.9006%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.60%)</title><rect x="12.6506%" y="245" width="0.6024%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="1"/><text x="12.9006%" y="255.50"></text></g><g><title>testrig`tracing_appender::rolling::RollingFileAppender::new (1 samples, 0.60%)</title><rect x="13.2530%" y="389" width="0.6024%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="13.5030%" y="399.50"></text></g><g><title>testrig`tracing_appender::rolling::Rotation::join_date (1 samples, 0.60%)</title><rect x="13.2530%" y="373" width="0.6024%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="13.5030%" y="383.50"></text></g><g><title>testrig`time::formatting::formattable::sealed::Sealed::format (1 samples, 0.60%)</title><rect x="13.2530%" y="357" width="0.6024%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="13.5030%" y="367.50"></text></g><g><title>testrig`time::formatting::formattable::_&lt;impl time::formatting::formattable::sealed::Sealed for time::format_description::borrowed_format_item::BorrowedFormatItem&gt;::format_into (1 samples, 0.60%)</title><rect x="13.2530%" y="341" width="0.6024%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="13.5030%" y="351.50"></text></g><g><title>testrig`time::formatting::format_component (1 samples, 0.60%)</title><rect x="13.2530%" y="325" width="0.6024%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="1"/><text x="13.5030%" y="335.50"></text></g><g><title>testrig`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.60%)</title><rect x="13.2530%" y="309" width="0.6024%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="1"/><text x="13.5030%" y="319.50"></text></g><g><title>testrig`wigglyair::configuration::setup_tracing (2 samples, 1.20%)</title><rect x="13.2530%" y="405" width="1.2048%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="2"/><text x="13.5030%" y="415.50"></text></g><g><title>testrig`tracing_subscriber::filter::env::EnvFilter::new (1 samples, 0.60%)</title><rect x="13.8554%" y="389" width="0.6024%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="14.1054%" y="399.50"></text></g><g><title>testrig`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.60%)</title><rect x="13.8554%" y="373" width="0.6024%" height="15" fill="rgb(233,36,39)" fg:x="23" fg:w="1"/><text x="14.1054%" y="383.50"></text></g><g><title>testrig`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.60%)</title><rect x="13.8554%" y="357" width="0.6024%" height="15" fill="rgb(226,3,54)" fg:x="23" fg:w="1"/><text x="14.1054%" y="367.50"></text></g><g><title>testrig`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.60%)</title><rect x="13.8554%" y="341" width="0.6024%" height="15" fill="rgb(245,192,40)" fg:x="23" fg:w="1"/><text x="14.1054%" y="351.50"></text></g><g><title>testrig`tracing_subscriber::filter::env::directive::Directive::parse (1 samples, 0.60%)</title><rect x="13.8554%" y="325" width="0.6024%" height="15" fill="rgb(238,167,29)" fg:x="23" fg:w="1"/><text x="14.1054%" y="335.50"></text></g><g><title>testrig`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.60%)</title><rect x="13.8554%" y="309" width="0.6024%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="1"/><text x="14.1054%" y="319.50"></text></g><g><title>testrig`once_cell::imp::initialize_or_wait (1 samples, 0.60%)</title><rect x="13.8554%" y="293" width="0.6024%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="1"/><text x="14.1054%" y="303.50"></text></g><g><title>testrig`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.60%)</title><rect x="13.8554%" y="277" width="0.6024%" height="15" fill="rgb(208,69,12)" fg:x="23" fg:w="1"/><text x="14.1054%" y="287.50"></text></g><g><title>testrig`core::ops::function::FnOnce::call_once (1 samples, 0.60%)</title><rect x="13.8554%" y="261" width="0.6024%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="1"/><text x="14.1054%" y="271.50"></text></g><g><title>testrig`regex::re_unicode::Regex::new (1 samples, 0.60%)</title><rect x="13.8554%" y="245" width="0.6024%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="14.1054%" y="255.50"></text></g><g><title>testrig`regex::exec::ExecBuilder::build (1 samples, 0.60%)</title><rect x="13.8554%" y="229" width="0.6024%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="1"/><text x="14.1054%" y="239.50"></text></g><g><title>testrig`regex::compile::Compiler::compile (1 samples, 0.60%)</title><rect x="13.8554%" y="213" width="0.6024%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="1"/><text x="14.1054%" y="223.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="197" width="0.6024%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="1"/><text x="14.1054%" y="207.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="181" width="0.6024%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="1"/><text x="14.1054%" y="191.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="165" width="0.6024%" height="15" fill="rgb(239,60,40)" fg:x="23" fg:w="1"/><text x="14.1054%" y="175.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="149" width="0.6024%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="1"/><text x="14.1054%" y="159.50"></text></g><g><title>testrig`regex::compile::Compiler::c_concat (1 samples, 0.60%)</title><rect x="13.8554%" y="133" width="0.6024%" height="15" fill="rgb(225,35,8)" fg:x="23" fg:w="1"/><text x="14.1054%" y="143.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="117" width="0.6024%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="1"/><text x="14.1054%" y="127.50"></text></g><g><title>testrig`regex::compile::Compiler::c (1 samples, 0.60%)</title><rect x="13.8554%" y="101" width="0.6024%" height="15" fill="rgb(247,123,22)" fg:x="23" fg:w="1"/><text x="14.1054%" y="111.50"></text></g><g><title>testrig`regex::compile::Compiler::c_repeat_one_or_more (1 samples, 0.60%)</title><rect x="13.8554%" y="85" width="0.6024%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="1"/><text x="14.1054%" y="95.50"></text></g><g><title>testrig`regex::compile::Compiler::c_class (1 samples, 0.60%)</title><rect x="13.8554%" y="69" width="0.6024%" height="15" fill="rgb(231,145,46)" fg:x="23" fg:w="1"/><text x="14.1054%" y="79.50"></text></g><g><title>testrig`regex::compile::CompileClass::c_utf8_seq (1 samples, 0.60%)</title><rect x="13.8554%" y="53" width="0.6024%" height="15" fill="rgb(251,118,11)" fg:x="23" fg:w="1"/><text x="14.1054%" y="63.50"></text></g><g><title>testrig`regex::compile::SuffixCache::get (1 samples, 0.60%)</title><rect x="13.8554%" y="37" width="0.6024%" height="15" fill="rgb(217,147,25)" fg:x="23" fg:w="1"/><text x="14.1054%" y="47.50"></text></g><g><title>dyld`start (25 samples, 15.06%)</title><rect x="0.0000%" y="549" width="15.0602%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="25"/><text x="0.2500%" y="559.50">dyld`start</text></g><g><title>testrig`main (25 samples, 15.06%)</title><rect x="0.0000%" y="533" width="15.0602%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="25"/><text x="0.2500%" y="543.50">testrig`main</text></g><g><title>testrig`std::rt::lang_start_internal (24 samples, 14.46%)</title><rect x="0.6024%" y="517" width="14.4578%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="24"/><text x="0.8524%" y="527.50">testrig`std::rt::lang_..</text></g><g><title>testrig`std::rt::lang_start::_{{closure}} (24 samples, 14.46%)</title><rect x="0.6024%" y="501" width="14.4578%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="24"/><text x="0.8524%" y="511.50">testrig`std::rt::lang_..</text></g><g><title>testrig`std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 14.46%)</title><rect x="0.6024%" y="485" width="14.4578%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="24"/><text x="0.8524%" y="495.50">testrig`std::sys_commo..</text></g><g><title>testrig`testrig::main (24 samples, 14.46%)</title><rect x="0.6024%" y="469" width="14.4578%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="24"/><text x="0.8524%" y="479.50">testrig`testrig::main</text></g><g><title>testrig`tokio::runtime::runtime::Runtime::block_on (24 samples, 14.46%)</title><rect x="0.6024%" y="453" width="14.4578%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="24"/><text x="0.8524%" y="463.50">testrig`tokio::runtime..</text></g><g><title>testrig`tokio::runtime::context::runtime::enter_runtime (24 samples, 14.46%)</title><rect x="0.6024%" y="437" width="14.4578%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="24"/><text x="0.8524%" y="447.50">testrig`tokio::runtime..</text></g><g><title>testrig`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (23 samples, 13.86%)</title><rect x="1.2048%" y="421" width="13.8554%" height="15" fill="rgb(247,98,35)" fg:x="2" fg:w="23"/><text x="1.4548%" y="431.50">testrig`tokio::runtim..</text></g><g><title>testrig`wigglyair::metadata::read_cached_metadata (1 samples, 0.60%)</title><rect x="14.4578%" y="405" width="0.6024%" height="15" fill="rgb(247,138,52)" fg:x="24" fg:w="1"/><text x="14.7078%" y="415.50"></text></g><g><title>testrig`serde_json::de::from_trait (1 samples, 0.60%)</title><rect x="14.4578%" y="389" width="0.6024%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="14.7078%" y="399.50"></text></g><g><title>testrig`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.60%)</title><rect x="14.4578%" y="373" width="0.6024%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="1"/><text x="14.7078%" y="383.50"></text></g><g><title>testrig`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.60%)</title><rect x="14.4578%" y="357" width="0.6024%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="14.7078%" y="367.50"></text></g><g><title>testrig`parking_lot::condvar::Condvar::wait_until_internal (3 samples, 1.81%)</title><rect x="15.0602%" y="453" width="1.8072%" height="15" fill="rgb(216,154,8)" fg:x="25" fg:w="3"/><text x="15.3102%" y="463.50">t..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 1.81%)</title><rect x="15.0602%" y="437" width="1.8072%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="3"/><text x="15.3102%" y="447.50">l..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.60%)</title><rect x="16.8675%" y="405" width="0.6024%" height="15" fill="rgb(251,115,12)" fg:x="28" fg:w="1"/><text x="17.1175%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`stat (53 samples, 31.93%)</title><rect x="17.4699%" y="389" width="31.9277%" height="15" fill="rgb(240,54,50)" fg:x="29" fg:w="53"/><text x="17.7199%" y="399.50">libsystem_kernel.dylib`stat</text></g><g><title>testrig`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 32.53%)</title><rect x="17.4699%" y="405" width="32.5301%" height="15" fill="rgb(233,84,52)" fg:x="29" fg:w="54"/><text x="17.7199%" y="415.50">testrig`&lt;tokio::runtime::blocking::task::BlockingTask..</text></g><g><title>testrig`std::sys::unix::fs::stat (1 samples, 0.60%)</title><rect x="49.3976%" y="389" width="0.6024%" height="15" fill="rgb(207,117,47)" fg:x="82" fg:w="1"/><text x="49.6476%" y="399.50"></text></g><g><title>testrig`__floatuntidf (1 samples, 0.60%)</title><rect x="50.0000%" y="357" width="0.6024%" height="15" fill="rgb(249,43,39)" fg:x="83" fg:w="1"/><text x="50.2500%" y="367.50"></text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.60%)</title><rect x="50.6024%" y="341" width="0.6024%" height="15" fill="rgb(209,38,44)" fg:x="84" fg:w="1"/><text x="50.8524%" y="351.50"></text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.60%)</title><rect x="51.2048%" y="341" width="0.6024%" height="15" fill="rgb(236,212,23)" fg:x="85" fg:w="1"/><text x="51.4548%" y="351.50"></text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (7 samples, 4.22%)</title><rect x="51.8072%" y="341" width="4.2169%" height="15" fill="rgb(242,79,21)" fg:x="86" fg:w="7"/><text x="52.0572%" y="351.50">testr..</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::park::Parker::park (7 samples, 4.22%)</title><rect x="51.8072%" y="325" width="4.2169%" height="15" fill="rgb(211,96,35)" fg:x="86" fg:w="7"/><text x="52.0572%" y="335.50">testr..</text></g><g><title>testrig`parking_lot::condvar::Condvar::wait_until_internal (7 samples, 4.22%)</title><rect x="51.8072%" y="309" width="4.2169%" height="15" fill="rgb(253,215,40)" fg:x="86" fg:w="7"/><text x="52.0572%" y="319.50">testr..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7 samples, 4.22%)</title><rect x="51.8072%" y="293" width="4.2169%" height="15" fill="rgb(211,81,21)" fg:x="86" fg:w="7"/><text x="52.0572%" y="303.50">libsy..</text></g><g><title>testrig`parking_lot::condvar::Condvar::notify_one_slow (2 samples, 1.20%)</title><rect x="56.0241%" y="325" width="1.2048%" height="15" fill="rgb(208,190,38)" fg:x="93" fg:w="2"/><text x="56.2741%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.60%)</title><rect x="56.6265%" y="309" width="0.6024%" height="15" fill="rgb(235,213,38)" fg:x="94" fg:w="1"/><text x="56.8765%" y="319.50"></text></g><g><title>testrig`&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1 samples, 0.60%)</title><rect x="57.8313%" y="277" width="0.6024%" height="15" fill="rgb(237,122,38)" fg:x="96" fg:w="1"/><text x="58.0813%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.60%)</title><rect x="59.0361%" y="181" width="0.6024%" height="15" fill="rgb(244,218,35)" fg:x="98" fg:w="1"/><text x="59.2861%" y="191.50"></text></g><g><title>testrig`tokio::runtime::blocking::pool::spawn_blocking (2 samples, 1.20%)</title><rect x="59.0361%" y="245" width="1.2048%" height="15" fill="rgb(240,68,47)" fg:x="98" fg:w="2"/><text x="59.2861%" y="255.50"></text></g><g><title>testrig`tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 1.20%)</title><rect x="59.0361%" y="229" width="1.2048%" height="15" fill="rgb(210,16,53)" fg:x="98" fg:w="2"/><text x="59.2861%" y="239.50"></text></g><g><title>testrig`tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 1.20%)</title><rect x="59.0361%" y="213" width="1.2048%" height="15" fill="rgb(235,124,12)" fg:x="98" fg:w="2"/><text x="59.2861%" y="223.50"></text></g><g><title>testrig`parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 1.20%)</title><rect x="59.0361%" y="197" width="1.2048%" height="15" fill="rgb(224,169,11)" fg:x="98" fg:w="2"/><text x="59.2861%" y="207.50"></text></g><g><title>testrig`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.60%)</title><rect x="59.6386%" y="181" width="0.6024%" height="15" fill="rgb(250,166,2)" fg:x="99" fg:w="1"/><text x="59.8886%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.60%)</title><rect x="59.6386%" y="165" width="0.6024%" height="15" fill="rgb(242,216,29)" fg:x="99" fg:w="1"/><text x="59.8886%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.60%)</title><rect x="59.6386%" y="149" width="0.6024%" height="15" fill="rgb(230,116,27)" fg:x="99" fg:w="1"/><text x="59.8886%" y="159.50"></text></g><g><title>testrig`alloc::fmt::format::format_inner (1 samples, 0.60%)</title><rect x="60.2410%" y="181" width="0.6024%" height="15" fill="rgb(228,99,48)" fg:x="100" fg:w="1"/><text x="60.4910%" y="191.50"></text></g><g><title>testrig`core::fmt::write (1 samples, 0.60%)</title><rect x="60.2410%" y="165" width="0.6024%" height="15" fill="rgb(253,11,6)" fg:x="100" fg:w="1"/><text x="60.4910%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.60%)</title><rect x="60.2410%" y="149" width="0.6024%" height="15" fill="rgb(247,143,39)" fg:x="100" fg:w="1"/><text x="60.4910%" y="159.50"></text></g><g><title>testrig`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="60.8434%" y="165" width="0.6024%" height="15" fill="rgb(236,97,10)" fg:x="101" fg:w="1"/><text x="61.0934%" y="175.50"></text></g><g><title>testrig`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="60.8434%" y="149" width="0.6024%" height="15" fill="rgb(233,208,19)" fg:x="101" fg:w="1"/><text x="61.0934%" y="159.50"></text></g><g><title>testrig`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="60.8434%" y="133" width="0.6024%" height="15" fill="rgb(216,164,2)" fg:x="101" fg:w="1"/><text x="61.0934%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.60%)</title><rect x="60.8434%" y="117" width="0.6024%" height="15" fill="rgb(220,129,5)" fg:x="101" fg:w="1"/><text x="61.0934%" y="127.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (9 samples, 5.42%)</title><rect x="60.8434%" y="181" width="5.4217%" height="15" fill="rgb(242,17,10)" fg:x="101" fg:w="9"/><text x="61.0934%" y="191.50">testrig..</text></g><g><title>testrig`std::io::Write::write_all (8 samples, 4.82%)</title><rect x="61.4458%" y="165" width="4.8193%" height="15" fill="rgb(242,107,0)" fg:x="102" fg:w="8"/><text x="61.6958%" y="175.50">testri..</text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (8 samples, 4.82%)</title><rect x="61.4458%" y="149" width="4.8193%" height="15" fill="rgb(251,28,31)" fg:x="102" fg:w="8"/><text x="61.6958%" y="159.50">testri..</text></g><g><title>libsystem_kernel.dylib`write (8 samples, 4.82%)</title><rect x="61.4458%" y="133" width="4.8193%" height="15" fill="rgb(233,223,10)" fg:x="102" fg:w="8"/><text x="61.6958%" y="143.50">libsys..</text></g><g><title>testrig`time::formatting::formattable::sealed::Sealed::format (1 samples, 0.60%)</title><rect x="66.2651%" y="165" width="0.6024%" height="15" fill="rgb(215,21,27)" fg:x="110" fg:w="1"/><text x="66.5151%" y="175.50"></text></g><g><title>testrig`time::formatting::format_number_pad_zero (1 samples, 0.60%)</title><rect x="66.2651%" y="149" width="0.6024%" height="15" fill="rgb(232,23,21)" fg:x="110" fg:w="1"/><text x="66.5151%" y="159.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::serialize_bunyan_core_fields (2 samples, 1.20%)</title><rect x="66.2651%" y="181" width="1.2048%" height="15" fill="rgb(244,5,23)" fg:x="110" fg:w="2"/><text x="66.5151%" y="191.50"></text></g><g><title>testrig`time::time::Time::hour (1 samples, 0.60%)</title><rect x="66.8675%" y="165" width="0.6024%" height="15" fill="rgb(226,81,46)" fg:x="111" fg:w="1"/><text x="67.1175%" y="175.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::format_span_context (1 samples, 0.60%)</title><rect x="67.4699%" y="181" width="0.6024%" height="15" fill="rgb(247,70,30)" fg:x="112" fg:w="1"/><text x="67.7199%" y="191.50"></text></g><g><title>testrig`alloc::fmt::format::format_inner (1 samples, 0.60%)</title><rect x="67.4699%" y="165" width="0.6024%" height="15" fill="rgb(212,68,19)" fg:x="112" fg:w="1"/><text x="67.7199%" y="175.50"></text></g><g><title>testrig`wigglyair::metadata::TrackMetadata::read_from_path::_{{closure}}::_{{closure}}::_{{closure}} (14 samples, 8.43%)</title><rect x="60.2410%" y="245" width="8.4337%" height="15" fill="rgb(240,187,13)" fg:x="100" fg:w="14"/><text x="60.4910%" y="255.50">testrig`wigg..</text></g><g><title>testrig`tracing_core::event::Event::dispatch (14 samples, 8.43%)</title><rect x="60.2410%" y="229" width="8.4337%" height="15" fill="rgb(223,113,26)" fg:x="100" fg:w="14"/><text x="60.4910%" y="239.50">testrig`trac..</text></g><g><title>testrig`tracing_core::dispatcher::get_default (14 samples, 8.43%)</title><rect x="60.2410%" y="213" width="8.4337%" height="15" fill="rgb(206,192,2)" fg:x="100" fg:w="14"/><text x="60.4910%" y="223.50">testrig`trac..</text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event (14 samples, 8.43%)</title><rect x="60.2410%" y="197" width="8.4337%" height="15" fill="rgb(241,108,4)" fg:x="100" fg:w="14"/><text x="60.4910%" y="207.50">testrig`&lt;tra..</text></g><g><title>testrig`tracing_core::field::ValueSet::record (1 samples, 0.60%)</title><rect x="68.0723%" y="181" width="0.6024%" height="15" fill="rgb(247,173,49)" fg:x="113" fg:w="1"/><text x="68.3223%" y="191.50"></text></g><g><title>testrig`&lt;tracing_bunyan_formatter::storage_layer::JsonStorage as tracing_core::field::Visit&gt;::record_debug (1 samples, 0.60%)</title><rect x="68.0723%" y="165" width="0.6024%" height="15" fill="rgb(224,114,35)" fg:x="113" fg:w="1"/><text x="68.3223%" y="175.50"></text></g><g><title>testrig`alloc::fmt::format::format_inner (1 samples, 0.60%)</title><rect x="68.0723%" y="149" width="0.6024%" height="15" fill="rgb(245,159,27)" fg:x="113" fg:w="1"/><text x="68.3223%" y="159.50"></text></g><g><title>testrig`&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (1 samples, 0.60%)</title><rect x="68.0723%" y="133" width="0.6024%" height="15" fill="rgb(245,172,44)" fg:x="113" fg:w="1"/><text x="68.3223%" y="143.50"></text></g><g><title>testrig`&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (3 samples, 1.81%)</title><rect x="69.2771%" y="213" width="1.8072%" height="15" fill="rgb(236,23,11)" fg:x="115" fg:w="3"/><text x="69.5271%" y="223.50">t..</text></g><g><title>testrig`chrono::format::format_inner (2 samples, 1.20%)</title><rect x="69.8795%" y="197" width="1.2048%" height="15" fill="rgb(205,117,38)" fg:x="116" fg:w="2"/><text x="70.1295%" y="207.50"></text></g><g><title>testrig`core::fmt::write (1 samples, 0.60%)</title><rect x="70.4819%" y="181" width="0.6024%" height="15" fill="rgb(237,72,25)" fg:x="117" fg:w="1"/><text x="70.7319%" y="191.50"></text></g><g><title>testrig`core::fmt::num::imp::_&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.60%)</title><rect x="70.4819%" y="165" width="0.6024%" height="15" fill="rgb(244,70,9)" fg:x="117" fg:w="1"/><text x="70.7319%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.60%)</title><rect x="70.4819%" y="149" width="0.6024%" height="15" fill="rgb(217,125,39)" fg:x="117" fg:w="1"/><text x="70.7319%" y="159.50"></text></g><g><title>testrig`wigglyair::metadata::last_modified (5 samples, 3.01%)</title><rect x="68.6747%" y="245" width="3.0120%" height="15" fill="rgb(235,36,10)" fg:x="114" fg:w="5"/><text x="68.9247%" y="255.50">tes..</text></g><g><title>testrig`chrono::datetime::DateTime&lt;Tz&gt;::to_rfc3339_opts (4 samples, 2.41%)</title><rect x="69.2771%" y="229" width="2.4096%" height="15" fill="rgb(251,123,47)" fg:x="115" fg:w="4"/><text x="69.5271%" y="239.50">te..</text></g><g><title>testrig`chrono::format::DelayedFormat&lt;I&gt;::new_with_offset (1 samples, 0.60%)</title><rect x="71.0843%" y="213" width="0.6024%" height="15" fill="rgb(221,13,13)" fg:x="118" fg:w="1"/><text x="71.3343%" y="223.50"></text></g><g><title>testrig`&lt;chrono::offset::utc::Utc as core::fmt::Display&gt;::fmt (1 samples, 0.60%)</title><rect x="71.0843%" y="197" width="0.6024%" height="15" fill="rgb(238,131,9)" fg:x="118" fg:w="1"/><text x="71.3343%" y="207.50"></text></g><g><title>testrig`core::fmt::Formatter::write_fmt (1 samples, 0.60%)</title><rect x="71.0843%" y="181" width="0.6024%" height="15" fill="rgb(211,50,8)" fg:x="118" fg:w="1"/><text x="71.3343%" y="191.50"></text></g><g><title>testrig`core::fmt::write (1 samples, 0.60%)</title><rect x="71.0843%" y="165" width="0.6024%" height="15" fill="rgb(245,182,24)" fg:x="118" fg:w="1"/><text x="71.3343%" y="175.50"></text></g><g><title>testrig`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.60%)</title><rect x="71.0843%" y="149" width="0.6024%" height="15" fill="rgb(242,14,37)" fg:x="118" fg:w="1"/><text x="71.3343%" y="159.50"></text></g><g><title>testrig`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.60%)</title><rect x="71.0843%" y="133" width="0.6024%" height="15" fill="rgb(246,228,12)" fg:x="118" fg:w="1"/><text x="71.3343%" y="143.50"></text></g><g><title>testrig`__rdl_alloc (1 samples, 0.60%)</title><rect x="71.0843%" y="117" width="0.6024%" height="15" fill="rgb(213,55,15)" fg:x="118" fg:w="1"/><text x="71.3343%" y="127.50"></text></g><g><title>testrig`wigglyair::metadata::read_comments (1 samples, 0.60%)</title><rect x="71.6867%" y="245" width="0.6024%" height="15" fill="rgb(209,9,3)" fg:x="119" fg:w="1"/><text x="71.9367%" y="255.50"></text></g><g><title>testrig`tracing::span::Span::new (1 samples, 0.60%)</title><rect x="71.6867%" y="229" width="0.6024%" height="15" fill="rgb(230,59,30)" fg:x="119" fg:w="1"/><text x="71.9367%" y="239.50"></text></g><g><title>testrig`tracing_core::dispatcher::get_default (1 samples, 0.60%)</title><rect x="71.6867%" y="213" width="0.6024%" height="15" fill="rgb(209,121,21)" fg:x="119" fg:w="1"/><text x="71.9367%" y="223.50"></text></g><g><title>testrig`tracing::span::Span::make_with (1 samples, 0.60%)</title><rect x="71.6867%" y="197" width="0.6024%" height="15" fill="rgb(220,109,13)" fg:x="119" fg:w="1"/><text x="71.9367%" y="207.50"></text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (1 samples, 0.60%)</title><rect x="71.6867%" y="181" width="0.6024%" height="15" fill="rgb(232,18,1)" fg:x="119" fg:w="1"/><text x="71.9367%" y="191.50"></text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_new_span (1 samples, 0.60%)</title><rect x="71.6867%" y="165" width="0.6024%" height="15" fill="rgb(215,41,42)" fg:x="119" fg:w="1"/><text x="71.9367%" y="175.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (1 samples, 0.60%)</title><rect x="71.6867%" y="149" width="0.6024%" height="15" fill="rgb(224,123,36)" fg:x="119" fg:w="1"/><text x="71.9367%" y="159.50"></text></g><g><title>testrig`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="71.6867%" y="133" width="0.6024%" height="15" fill="rgb(240,125,3)" fg:x="119" fg:w="1"/><text x="71.9367%" y="143.50"></text></g><g><title>testrig`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="71.6867%" y="117" width="0.6024%" height="15" fill="rgb(205,98,50)" fg:x="119" fg:w="1"/><text x="71.9367%" y="127.50"></text></g><g><title>testrig`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="71.6867%" y="101" width="0.6024%" height="15" fill="rgb(205,185,37)" fg:x="119" fg:w="1"/><text x="71.9367%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.60%)</title><rect x="71.6867%" y="85" width="0.6024%" height="15" fill="rgb(238,207,15)" fg:x="119" fg:w="1"/><text x="71.9367%" y="95.50"></text></g><g><title>testrig`core::ptr::drop_in_place&lt;tracing::span::Span&gt; (2 samples, 1.20%)</title><rect x="72.2892%" y="229" width="1.2048%" height="15" fill="rgb(213,199,42)" fg:x="120" fg:w="2"/><text x="72.5392%" y="239.50"></text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (2 samples, 1.20%)</title><rect x="72.2892%" y="213" width="1.2048%" height="15" fill="rgb(235,201,11)" fg:x="120" fg:w="2"/><text x="72.5392%" y="223.50"></text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (2 samples, 1.20%)</title><rect x="72.2892%" y="197" width="1.2048%" height="15" fill="rgb(207,46,11)" fg:x="120" fg:w="2"/><text x="72.5392%" y="207.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (2 samples, 1.20%)</title><rect x="72.2892%" y="181" width="1.2048%" height="15" fill="rgb(241,35,35)" fg:x="120" fg:w="2"/><text x="72.5392%" y="191.50"></text></g><g><title>testrig`std::io::Write::write_all (2 samples, 1.20%)</title><rect x="72.2892%" y="165" width="1.2048%" height="15" fill="rgb(243,32,47)" fg:x="120" fg:w="2"/><text x="72.5392%" y="175.50"></text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (2 samples, 1.20%)</title><rect x="72.2892%" y="149" width="1.2048%" height="15" fill="rgb(247,202,23)" fg:x="120" fg:w="2"/><text x="72.5392%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 1.20%)</title><rect x="72.2892%" y="133" width="1.2048%" height="15" fill="rgb(219,102,11)" fg:x="120" fg:w="2"/><text x="72.5392%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (10 samples, 6.02%)</title><rect x="75.3012%" y="149" width="6.0241%" height="15" fill="rgb(243,110,44)" fg:x="125" fg:w="10"/><text x="75.5512%" y="159.50">libsyste..</text></g><g><title>testrig`metaflac::block::Block::read_from (14 samples, 8.43%)</title><rect x="73.4940%" y="181" width="8.4337%" height="15" fill="rgb(222,74,54)" fg:x="122" fg:w="14"/><text x="73.7440%" y="191.50">testrig`meta..</text></g><g><title>testrig`std::io::default_read_to_end (12 samples, 7.23%)</title><rect x="74.6988%" y="165" width="7.2289%" height="15" fill="rgb(216,99,12)" fg:x="124" fg:w="12"/><text x="74.9488%" y="175.50">testrig`st..</text></g><g><title>testrig`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.60%)</title><rect x="81.3253%" y="149" width="0.6024%" height="15" fill="rgb(226,22,26)" fg:x="135" fg:w="1"/><text x="81.5753%" y="159.50"></text></g><g><title>testrig`__rdl_alloc (1 samples, 0.60%)</title><rect x="81.3253%" y="133" width="0.6024%" height="15" fill="rgb(217,163,10)" fg:x="135" fg:w="1"/><text x="81.5753%" y="143.50"></text></g><g><title>testrig`metaflac::tag::Tag::read_from (15 samples, 9.04%)</title><rect x="73.4940%" y="213" width="9.0361%" height="15" fill="rgb(213,25,53)" fg:x="122" fg:w="15"/><text x="73.7440%" y="223.50">testrig`metaf..</text></g><g><title>testrig`&lt;metaflac::block::Blocks&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 9.04%)</title><rect x="73.4940%" y="197" width="9.0361%" height="15" fill="rgb(252,105,26)" fg:x="122" fg:w="15"/><text x="73.7440%" y="207.50">testrig`&lt;meta..</text></g><g><title>testrig`std::io::default_read_exact (1 samples, 0.60%)</title><rect x="81.9277%" y="181" width="0.6024%" height="15" fill="rgb(220,39,43)" fg:x="136" fg:w="1"/><text x="82.1777%" y="191.50"></text></g><g><title>testrig`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.60%)</title><rect x="81.9277%" y="165" width="0.6024%" height="15" fill="rgb(229,68,48)" fg:x="136" fg:w="1"/><text x="82.1777%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.60%)</title><rect x="81.9277%" y="149" width="0.6024%" height="15" fill="rgb(252,8,32)" fg:x="136" fg:w="1"/><text x="82.1777%" y="159.50"></text></g><g><title>testrig`metaflac::tag::Tag::read_from_path (17 samples, 10.24%)</title><rect x="73.4940%" y="229" width="10.2410%" height="15" fill="rgb(223,20,43)" fg:x="122" fg:w="17"/><text x="73.7440%" y="239.50">testrig`metafla..</text></g><g><title>testrig`std::fs::OpenOptions::_open (2 samples, 1.20%)</title><rect x="82.5301%" y="213" width="1.2048%" height="15" fill="rgb(229,81,49)" fg:x="137" fg:w="2"/><text x="82.7801%" y="223.50"></text></g><g><title>testrig`std::sys::unix::fs::File::open_c (2 samples, 1.20%)</title><rect x="82.5301%" y="197" width="1.2048%" height="15" fill="rgb(236,28,36)" fg:x="137" fg:w="2"/><text x="82.7801%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 1.20%)</title><rect x="82.5301%" y="181" width="1.2048%" height="15" fill="rgb(249,185,26)" fg:x="137" fg:w="2"/><text x="82.7801%" y="191.50"></text></g><g><title>testrig`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="83.7349%" y="133" width="0.6024%" height="15" fill="rgb(249,174,33)" fg:x="139" fg:w="1"/><text x="83.9849%" y="143.50"></text></g><g><title>testrig`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="83.7349%" y="117" width="0.6024%" height="15" fill="rgb(233,201,37)" fg:x="139" fg:w="1"/><text x="83.9849%" y="127.50"></text></g><g><title>testrig`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 0.60%)</title><rect x="83.7349%" y="101" width="0.6024%" height="15" fill="rgb(221,78,26)" fg:x="139" fg:w="1"/><text x="83.9849%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.60%)</title><rect x="83.7349%" y="85" width="0.6024%" height="15" fill="rgb(250,127,30)" fg:x="139" fg:w="1"/><text x="83.9849%" y="95.50"></text></g><g><title>testrig`wigglyair::metadata::read_tag_from_path (24 samples, 14.46%)</title><rect x="72.2892%" y="245" width="14.4578%" height="15" fill="rgb(230,49,44)" fg:x="120" fg:w="24"/><text x="72.5392%" y="255.50">testrig`wigglyair::met..</text></g><g><title>testrig`tracing::span::Span::new (5 samples, 3.01%)</title><rect x="83.7349%" y="229" width="3.0120%" height="15" fill="rgb(229,67,23)" fg:x="139" fg:w="5"/><text x="83.9849%" y="239.50">tes..</text></g><g><title>testrig`tracing_core::dispatcher::get_default (5 samples, 3.01%)</title><rect x="83.7349%" y="213" width="3.0120%" height="15" fill="rgb(249,83,47)" fg:x="139" fg:w="5"/><text x="83.9849%" y="223.50">tes..</text></g><g><title>testrig`tracing::span::Span::make_with (5 samples, 3.01%)</title><rect x="83.7349%" y="197" width="3.0120%" height="15" fill="rgb(215,43,3)" fg:x="139" fg:w="5"/><text x="83.9849%" y="207.50">tes..</text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (5 samples, 3.01%)</title><rect x="83.7349%" y="181" width="3.0120%" height="15" fill="rgb(238,154,13)" fg:x="139" fg:w="5"/><text x="83.9849%" y="191.50">tes..</text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_new_span (5 samples, 3.01%)</title><rect x="83.7349%" y="165" width="3.0120%" height="15" fill="rgb(219,56,2)" fg:x="139" fg:w="5"/><text x="83.9849%" y="175.50">tes..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (5 samples, 3.01%)</title><rect x="83.7349%" y="149" width="3.0120%" height="15" fill="rgb(233,0,4)" fg:x="139" fg:w="5"/><text x="83.9849%" y="159.50">tes..</text></g><g><title>testrig`std::io::Write::write_all (4 samples, 2.41%)</title><rect x="84.3373%" y="133" width="2.4096%" height="15" fill="rgb(235,30,7)" fg:x="140" fg:w="4"/><text x="84.5873%" y="143.50">te..</text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (4 samples, 2.41%)</title><rect x="84.3373%" y="117" width="2.4096%" height="15" fill="rgb(250,79,13)" fg:x="140" fg:w="4"/><text x="84.5873%" y="127.50">te..</text></g><g><title>libsystem_kernel.dylib`write (4 samples, 2.41%)</title><rect x="84.3373%" y="101" width="2.4096%" height="15" fill="rgb(211,146,34)" fg:x="140" fg:w="4"/><text x="84.5873%" y="111.50">li..</text></g><g><title>testrig`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (2 samples, 1.20%)</title><rect x="86.7470%" y="133" width="1.2048%" height="15" fill="rgb(228,22,38)" fg:x="144" fg:w="2"/><text x="86.9970%" y="143.50"></text></g><g><title>testrig`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (2 samples, 1.20%)</title><rect x="86.7470%" y="117" width="1.2048%" height="15" fill="rgb(235,168,5)" fg:x="144" fg:w="2"/><text x="86.9970%" y="127.50"></text></g><g><title>testrig`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (2 samples, 1.20%)</title><rect x="86.7470%" y="101" width="1.2048%" height="15" fill="rgb(221,155,16)" fg:x="144" fg:w="2"/><text x="86.9970%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 1.20%)</title><rect x="86.7470%" y="85" width="1.2048%" height="15" fill="rgb(215,215,53)" fg:x="144" fg:w="2"/><text x="86.9970%" y="95.50"></text></g><g><title>testrig`&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 30.12%)</title><rect x="58.4337%" y="261" width="30.1205%" height="15" fill="rgb(223,4,10)" fg:x="97" fg:w="50"/><text x="58.6837%" y="271.50">testrig`&lt;tracing::instrument::Instrumented&lt;T&gt; as ..</text></g><g><title>testrig`wigglyair::metadata::read_track_length (3 samples, 1.81%)</title><rect x="86.7470%" y="245" width="1.8072%" height="15" fill="rgb(234,103,6)" fg:x="144" fg:w="3"/><text x="86.9970%" y="255.50">t..</text></g><g><title>testrig`tracing::span::Span::new (3 samples, 1.81%)</title><rect x="86.7470%" y="229" width="1.8072%" height="15" fill="rgb(227,97,0)" fg:x="144" fg:w="3"/><text x="86.9970%" y="239.50">t..</text></g><g><title>testrig`tracing_core::dispatcher::get_default (3 samples, 1.81%)</title><rect x="86.7470%" y="213" width="1.8072%" height="15" fill="rgb(234,150,53)" fg:x="144" fg:w="3"/><text x="86.9970%" y="223.50">t..</text></g><g><title>testrig`tracing::span::Span::make_with (3 samples, 1.81%)</title><rect x="86.7470%" y="197" width="1.8072%" height="15" fill="rgb(228,201,54)" fg:x="144" fg:w="3"/><text x="86.9970%" y="207.50">t..</text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (3 samples, 1.81%)</title><rect x="86.7470%" y="181" width="1.8072%" height="15" fill="rgb(222,22,37)" fg:x="144" fg:w="3"/><text x="86.9970%" y="191.50">t..</text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_new_span (3 samples, 1.81%)</title><rect x="86.7470%" y="165" width="1.8072%" height="15" fill="rgb(237,53,32)" fg:x="144" fg:w="3"/><text x="86.9970%" y="175.50">t..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (3 samples, 1.81%)</title><rect x="86.7470%" y="149" width="1.8072%" height="15" fill="rgb(233,25,53)" fg:x="144" fg:w="3"/><text x="86.9970%" y="159.50">t..</text></g><g><title>testrig`std::io::Write::write_all (1 samples, 0.60%)</title><rect x="87.9518%" y="133" width="0.6024%" height="15" fill="rgb(210,40,34)" fg:x="146" fg:w="1"/><text x="88.2018%" y="143.50"></text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (1 samples, 0.60%)</title><rect x="87.9518%" y="117" width="0.6024%" height="15" fill="rgb(241,220,44)" fg:x="146" fg:w="1"/><text x="88.2018%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.60%)</title><rect x="87.9518%" y="101" width="0.6024%" height="15" fill="rgb(235,28,35)" fg:x="146" fg:w="1"/><text x="88.2018%" y="111.50"></text></g><g><title>testrig`core::fmt::write (1 samples, 0.60%)</title><rect x="88.5542%" y="261" width="0.6024%" height="15" fill="rgb(210,56,17)" fg:x="147" fg:w="1"/><text x="88.8042%" y="271.50"></text></g><g><title>testrig`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.60%)</title><rect x="88.5542%" y="245" width="0.6024%" height="15" fill="rgb(224,130,29)" fg:x="147" fg:w="1"/><text x="88.8042%" y="255.50"></text></g><g><title>testrig`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.60%)</title><rect x="88.5542%" y="229" width="0.6024%" height="15" fill="rgb(235,212,8)" fg:x="147" fg:w="1"/><text x="88.8042%" y="239.50"></text></g><g><title>testrig`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.60%)</title><rect x="88.5542%" y="213" width="0.6024%" height="15" fill="rgb(223,33,50)" fg:x="147" fg:w="1"/><text x="88.8042%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.60%)</title><rect x="88.5542%" y="197" width="0.6024%" height="15" fill="rgb(219,149,13)" fg:x="147" fg:w="1"/><text x="88.8042%" y="207.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (3 samples, 1.81%)</title><rect x="89.1566%" y="213" width="1.8072%" height="15" fill="rgb(250,156,29)" fg:x="148" fg:w="3"/><text x="89.4066%" y="223.50">t..</text></g><g><title>testrig`std::io::Write::write_all (3 samples, 1.81%)</title><rect x="89.1566%" y="197" width="1.8072%" height="15" fill="rgb(216,193,19)" fg:x="148" fg:w="3"/><text x="89.4066%" y="207.50">t..</text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (3 samples, 1.81%)</title><rect x="89.1566%" y="181" width="1.8072%" height="15" fill="rgb(216,135,14)" fg:x="148" fg:w="3"/><text x="89.4066%" y="191.50">t..</text></g><g><title>libsystem_kernel.dylib`write (3 samples, 1.81%)</title><rect x="89.1566%" y="165" width="1.8072%" height="15" fill="rgb(241,47,5)" fg:x="148" fg:w="3"/><text x="89.4066%" y="175.50">l..</text></g><g><title>testrig`core::ptr::drop_in_place&lt;tracing::span::Span&gt; (4 samples, 2.41%)</title><rect x="89.1566%" y="261" width="2.4096%" height="15" fill="rgb(233,42,35)" fg:x="148" fg:w="4"/><text x="89.4066%" y="271.50">te..</text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (4 samples, 2.41%)</title><rect x="89.1566%" y="245" width="2.4096%" height="15" fill="rgb(231,13,6)" fg:x="148" fg:w="4"/><text x="89.4066%" y="255.50">te..</text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_close (4 samples, 2.41%)</title><rect x="89.1566%" y="229" width="2.4096%" height="15" fill="rgb(207,181,40)" fg:x="148" fg:w="4"/><text x="89.4066%" y="239.50">te..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::serialize_span (1 samples, 0.60%)</title><rect x="90.9639%" y="213" width="0.6024%" height="15" fill="rgb(254,173,49)" fg:x="151" fg:w="1"/><text x="91.2139%" y="223.50"></text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::serialize_bunyan_core_fields (1 samples, 0.60%)</title><rect x="90.9639%" y="197" width="0.6024%" height="15" fill="rgb(221,1,38)" fg:x="151" fg:w="1"/><text x="91.2139%" y="207.50"></text></g><g><title>testrig`DYLD-STUB$$memcpy (1 samples, 0.60%)</title><rect x="90.9639%" y="181" width="0.6024%" height="15" fill="rgb(206,124,46)" fg:x="151" fg:w="1"/><text x="91.2139%" y="191.50"></text></g><g><title>testrig`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (3 samples, 1.81%)</title><rect x="91.5663%" y="165" width="1.8072%" height="15" fill="rgb(249,21,11)" fg:x="152" fg:w="3"/><text x="91.8163%" y="175.50">t..</text></g><g><title>testrig`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (3 samples, 1.81%)</title><rect x="91.5663%" y="149" width="1.8072%" height="15" fill="rgb(222,201,40)" fg:x="152" fg:w="3"/><text x="91.8163%" y="159.50">t..</text></g><g><title>testrig`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (3 samples, 1.81%)</title><rect x="91.5663%" y="133" width="1.8072%" height="15" fill="rgb(235,61,29)" fg:x="152" fg:w="3"/><text x="91.8163%" y="143.50">t..</text></g><g><title>libsystem_kernel.dylib`write (3 samples, 1.81%)</title><rect x="91.5663%" y="117" width="1.8072%" height="15" fill="rgb(219,207,3)" fg:x="152" fg:w="3"/><text x="91.8163%" y="127.50">l..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::emit (5 samples, 3.01%)</title><rect x="91.5663%" y="181" width="3.0120%" height="15" fill="rgb(222,56,46)" fg:x="152" fg:w="5"/><text x="91.8163%" y="191.50">tes..</text></g><g><title>testrig`std::io::Write::write_all (2 samples, 1.20%)</title><rect x="93.3735%" y="165" width="1.2048%" height="15" fill="rgb(239,76,54)" fg:x="155" fg:w="2"/><text x="93.6235%" y="175.50"></text></g><g><title>testrig`&lt;tracing_appender::rolling::RollingWriter as std::io::Write&gt;::write (2 samples, 1.20%)</title><rect x="93.3735%" y="149" width="1.2048%" height="15" fill="rgb(231,124,27)" fg:x="155" fg:w="2"/><text x="93.6235%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 1.20%)</title><rect x="93.3735%" y="133" width="1.2048%" height="15" fill="rgb(249,195,6)" fg:x="155" fg:w="2"/><text x="93.6235%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.60%)</title><rect x="94.5783%" y="149" width="0.6024%" height="15" fill="rgb(237,174,47)" fg:x="157" fg:w="1"/><text x="94.8283%" y="159.50"></text></g><g><title>testrig`time::formatting::formattable::sealed::Sealed::format (1 samples, 0.60%)</title><rect x="95.1807%" y="149" width="0.6024%" height="15" fill="rgb(206,201,31)" fg:x="158" fg:w="1"/><text x="95.4307%" y="159.50"></text></g><g><title>testrig`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (65 samples, 39.16%)</title><rect x="57.2289%" y="309" width="39.1566%" height="15" fill="rgb(231,57,52)" fg:x="95" fg:w="65"/><text x="57.4789%" y="319.50">testrig`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>testrig`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (65 samples, 39.16%)</title><rect x="57.2289%" y="293" width="39.1566%" height="15" fill="rgb(248,177,22)" fg:x="95" fg:w="65"/><text x="57.4789%" y="303.50">testrig`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>testrig`testrig::main::_{{closure}}::_{{closure}}::_{{closure}} (63 samples, 37.95%)</title><rect x="58.4337%" y="277" width="37.9518%" height="15" fill="rgb(215,211,37)" fg:x="97" fg:w="63"/><text x="58.6837%" y="287.50">testrig`testrig::main::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>testrig`tracing::span::Span::new (8 samples, 4.82%)</title><rect x="91.5663%" y="261" width="4.8193%" height="15" fill="rgb(241,128,51)" fg:x="152" fg:w="8"/><text x="91.8163%" y="271.50">testri..</text></g><g><title>testrig`tracing_core::dispatcher::get_default (8 samples, 4.82%)</title><rect x="91.5663%" y="245" width="4.8193%" height="15" fill="rgb(227,165,31)" fg:x="152" fg:w="8"/><text x="91.8163%" y="255.50">testri..</text></g><g><title>testrig`tracing::span::Span::make_with (8 samples, 4.82%)</title><rect x="91.5663%" y="229" width="4.8193%" height="15" fill="rgb(228,167,24)" fg:x="152" fg:w="8"/><text x="91.8163%" y="239.50">testri..</text></g><g><title>testrig`&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::new_span (8 samples, 4.82%)</title><rect x="91.5663%" y="213" width="4.8193%" height="15" fill="rgb(228,143,12)" fg:x="152" fg:w="8"/><text x="91.8163%" y="223.50">testri..</text></g><g><title>testrig`&lt;tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_new_span (8 samples, 4.82%)</title><rect x="91.5663%" y="197" width="4.8193%" height="15" fill="rgb(249,149,8)" fg:x="152" fg:w="8"/><text x="91.8163%" y="207.50">testri..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::serialize_span (3 samples, 1.81%)</title><rect x="94.5783%" y="181" width="1.8072%" height="15" fill="rgb(243,35,44)" fg:x="157" fg:w="3"/><text x="94.8283%" y="191.50">t..</text></g><g><title>testrig`tracing_bunyan_formatter::formatting_layer::BunyanFormattingLayer&lt;W&gt;::serialize_bunyan_core_fields (3 samples, 1.81%)</title><rect x="94.5783%" y="165" width="1.8072%" height="15" fill="rgb(246,89,9)" fg:x="157" fg:w="3"/><text x="94.8283%" y="175.50">t..</text></g><g><title>testrig`time::time::Time::second (1 samples, 0.60%)</title><rect x="95.7831%" y="149" width="0.6024%" height="15" fill="rgb(233,213,13)" fg:x="159" fg:w="1"/><text x="96.0331%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.60%)</title><rect x="96.3855%" y="261" width="0.6024%" height="15" fill="rgb(233,141,41)" fg:x="160" fg:w="1"/><text x="96.6355%" y="271.50"></text></g><g><title>testrig`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (134 samples, 80.72%)</title><rect x="16.8675%" y="437" width="80.7229%" height="15" fill="rgb(239,167,4)" fg:x="28" fg:w="134"/><text x="17.1175%" y="447.50">testrig`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>testrig`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (134 samples, 80.72%)</title><rect x="16.8675%" y="421" width="80.7229%" height="15" fill="rgb(209,217,16)" fg:x="28" fg:w="134"/><text x="17.1175%" y="431.50">testrig`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::worker::run (79 samples, 47.59%)</title><rect x="50.0000%" y="405" width="47.5904%" height="15" fill="rgb(219,88,35)" fg:x="83" fg:w="79"/><text x="50.2500%" y="415.50">testrig`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>testrig`tokio::runtime::context::runtime::enter_runtime (79 samples, 47.59%)</title><rect x="50.0000%" y="389" width="47.5904%" height="15" fill="rgb(220,193,23)" fg:x="83" fg:w="79"/><text x="50.2500%" y="399.50">testrig`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>testrig`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (79 samples, 47.59%)</title><rect x="50.0000%" y="373" width="47.5904%" height="15" fill="rgb(230,90,52)" fg:x="83" fg:w="79"/><text x="50.2500%" y="383.50">testrig`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::worker::Context::run (78 samples, 46.99%)</title><rect x="50.6024%" y="357" width="46.9880%" height="15" fill="rgb(252,106,19)" fg:x="84" fg:w="78"/><text x="50.8524%" y="367.50">testrig`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (69 samples, 41.57%)</title><rect x="56.0241%" y="341" width="41.5663%" height="15" fill="rgb(206,74,20)" fg:x="93" fg:w="69"/><text x="56.2741%" y="351.50">testrig`tokio::runtime::scheduler::multi_thread::worker::Context::ru..</text></g><g><title>testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (67 samples, 40.36%)</title><rect x="57.2289%" y="325" width="40.3614%" height="15" fill="rgb(230,138,44)" fg:x="95" fg:w="67"/><text x="57.4789%" y="335.50">testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 1.20%)</title><rect x="96.3855%" y="309" width="1.2048%" height="15" fill="rgb(235,182,43)" fg:x="160" fg:w="2"/><text x="96.6355%" y="319.50"></text></g><g><title>testrig`tokio::runtime::park::wake_by_ref (2 samples, 1.20%)</title><rect x="96.3855%" y="293" width="1.2048%" height="15" fill="rgb(242,16,51)" fg:x="160" fg:w="2"/><text x="96.6355%" y="303.50"></text></g><g><title>testrig`parking_lot::condvar::Condvar::notify_one_slow (2 samples, 1.20%)</title><rect x="96.3855%" y="277" width="1.2048%" height="15" fill="rgb(248,9,4)" fg:x="160" fg:w="2"/><text x="96.6355%" y="287.50"></text></g><g><title>testrig`parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.60%)</title><rect x="96.9880%" y="261" width="0.6024%" height="15" fill="rgb(210,31,22)" fg:x="161" fg:w="1"/><text x="97.2380%" y="271.50"></text></g><g><title>testrig`tokio::runtime::context::with_scheduler (1 samples, 0.60%)</title><rect x="97.5904%" y="421" width="0.6024%" height="15" fill="rgb(239,54,39)" fg:x="162" fg:w="1"/><text x="97.8404%" y="431.50"></text></g><g><title>testrig`parking_lot::condvar::Condvar::notify_one_slow (2 samples, 1.20%)</title><rect x="98.1928%" y="389" width="1.2048%" height="15" fill="rgb(230,99,41)" fg:x="163" fg:w="2"/><text x="98.4428%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 1.20%)</title><rect x="98.1928%" y="373" width="1.2048%" height="15" fill="rgb(253,106,12)" fg:x="163" fg:w="2"/><text x="98.4428%" y="383.50"></text></g><g><title>all (166 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="166"/><text x="0.2500%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (141 samples, 84.94%)</title><rect x="15.0602%" y="549" width="84.9398%" height="15" fill="rgb(215,133,35)" fg:x="25" fg:w="141"/><text x="15.3102%" y="559.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (141 samples, 84.94%)</title><rect x="15.0602%" y="533" width="84.9398%" height="15" fill="rgb(213,28,5)" fg:x="25" fg:w="141"/><text x="15.3102%" y="543.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>testrig`std::sys::unix::thread::Thread::new::thread_start (141 samples, 84.94%)</title><rect x="15.0602%" y="517" width="84.9398%" height="15" fill="rgb(215,77,49)" fg:x="25" fg:w="141"/><text x="15.3102%" y="527.50">testrig`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>testrig`core::ops::function::FnOnce::call_once{{vtable.shim}} (141 samples, 84.94%)</title><rect x="15.0602%" y="501" width="84.9398%" height="15" fill="rgb(248,100,22)" fg:x="25" fg:w="141"/><text x="15.3102%" y="511.50">testrig`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>testrig`std::sys_common::backtrace::__rust_begin_short_backtrace (141 samples, 84.94%)</title><rect x="15.0602%" y="485" width="84.9398%" height="15" fill="rgb(208,67,9)" fg:x="25" fg:w="141"/><text x="15.3102%" y="495.50">testrig`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>testrig`tokio::runtime::blocking::pool::Inner::run (141 samples, 84.94%)</title><rect x="15.0602%" y="469" width="84.9398%" height="15" fill="rgb(219,133,21)" fg:x="25" fg:w="141"/><text x="15.3102%" y="479.50">testrig`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (138 samples, 83.13%)</title><rect x="16.8675%" y="453" width="83.1325%" height="15" fill="rgb(246,46,29)" fg:x="28" fg:w="138"/><text x="17.1175%" y="463.50">testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>testrig`tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (4 samples, 2.41%)</title><rect x="97.5904%" y="437" width="2.4096%" height="15" fill="rgb(246,185,52)" fg:x="162" fg:w="4"/><text x="97.8404%" y="447.50">te..</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (3 samples, 1.81%)</title><rect x="98.1928%" y="421" width="1.8072%" height="15" fill="rgb(252,136,11)" fg:x="163" fg:w="3"/><text x="98.4428%" y="431.50">t..</text></g><g><title>testrig`tokio::runtime::context::with_scheduler (3 samples, 1.81%)</title><rect x="98.1928%" y="405" width="1.8072%" height="15" fill="rgb(219,138,53)" fg:x="163" fg:w="3"/><text x="98.4428%" y="415.50">t..</text></g><g><title>testrig`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.60%)</title><rect x="99.3976%" y="389" width="0.6024%" height="15" fill="rgb(211,51,23)" fg:x="165" fg:w="1"/><text x="99.6476%" y="399.50"></text></g></svg></svg>